import type { GetStaticPathsContext } from 'next'
import Head from 'next/head'
import Router, { useRouter } from 'next/router'
import { PrismaClient, Prisma } from '@prisma/client'
import type { Page } from '@prisma/client'
import { useEffect } from 'react'

const prisma = new PrismaClient()

const Pages = (props: Page) => {
    const { title } = props

    return (
        <div>
            <Head>
                <title>{title}</title>
                {/* <meta
                name="description"
                content="Generated by create next app"
            /> */}
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <header></header>

            <main>
                <span>{title}</span>
            </main>

            <footer></footer>
        </div>
    )
}

interface NewGetStaticPathsContext extends GetStaticPathsContext {
    params: {
        slug: string[]
    }
}

// export async function getServerSideProps(context: GetServerSidePropsContext) {
export async function getStaticProps(context: NewGetStaticPathsContext) {
    const { slug } = context.params
    const page: Page | null = await prisma.page.findUnique({
        where: { slug: slug.join('/') },
    })

    return {
        props: {
            ...page,
            updatedAt: Math.floor(
                (page?.updatedAt.getMilliseconds() || 1) / 1000
            ),
        },
        revalidate: 60,
        notFound: !page,
    }
}

export async function getStaticPaths() {
    const pages: Page[] = await prisma.page.findMany({
        where: {
            published: true,
            type: 'page',
        },
    })

    const paths = pages.map((page) => ({
        params: { slug: page.slug.split('/') },
    }))

    return {
        paths,
        fallback: true, // false or 'blocking'
    }
}

export default Pages
