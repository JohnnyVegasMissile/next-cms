// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// AUTH

model User {
  id String @id @default(cuid())

  name  String?
  login Login?

  createdPages      Page[]
  createdContainers Container[]
  createdContents   Content[]

  verified Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Message   Message[]
}

model Login {
  id String @id @default(cuid())

  userId   String    @unique
  user     User      @relation(fields: [userId], references: [id])
  sessions Session[]
  roleId   String?
  role     Role?     @relation(fields: [roleId], references: [id])

  root Boolean @default(false)

  email    String @unique
  password String
}

model Session {
  id String @id @default(cuid())

  token String @unique @default(cuid())

  loginId   String
  login     Login    @relation(fields: [loginId], references: [id], onDelete: Cascade)
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// RIGHTS & ACCESS

model Role {
  id String @id @default(cuid())

  name   String
  logins Login[]
  rights RightType[]

  limitUpload Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RightType {
  // PAGES
  VIEW_ALL_PAGE
  VIEW_MY_PAGE

  CREATE_PAGE

  UPDATE_ALL_PAGE
  UPDATE_MY_PAGE

  DELETE_ALL_PAGE
  DELETE_MY_PAGE

  UPDATE_ALL_PAGE_SECTION
  UPDATE_MY_PAGE_SECTION

  // CONTAINERS
  VIEW_ALL_CONTAINER
  VIEW_MY_CONTAINER

  CREATE_CONTAINER

  UPDATE_ALL_CONTAINER
  UPDATE_MY_CONTAINER

  DELETE_ALL_CONTAINER
  DELETE_MY_CONTAINER

  UPDATE_ALL_CONTAINER_SECTION
  UPDATE_MY_CONTAINER_SECTION

  UPDATE_ALL_CONTAINER_TEMPLATE_SECTION
  UPDATE_MY_CONTAINER_TEMPLATE_SECTION

  // CONTENTS
  VIEW_ALL_CONTENT
  VIEW_MY_CONTENT

  CREATE_CONTENT

  UPDATE_ALL_CONTENT
  UPDATE_MY_CONTENT

  DELETE_ALL_CONTENT
  DELETE_MY_CONTENT

  UPDATE_ALL_CONTENT_SECTION
  UPDATE_MY_CONTENT_SECTION

  // MEDIAS
  VIEW_ALL_MEDIA
  VIEW_MY_MEDIA

  UPLOAD_MEDIA

  UPDATE_ALL_MEDIA
  UPDATE_MY_MEDIA

  DELETE_ALL_MEDIA
  DELETE_MY_MEDIA

  // FORMS
  VIEW_ALL_FORM
  VIEW_MY_FORM

  CREATE_FORM

  UPDATE_ALL_FORM
  UPDATE_MY_FORM

  DELETE_ALL_FORM
  DELETE_MY_FORM

  // MESSAGES
  VIEW_MESSAGE

  READ_MESSAGE

  DELETE_MESSAGE

  // USERS
  VIEW_USER
  CREATE_USER
  UPDATE_USER
  DELETE_USER

  // ROLES
  VIEW_ALL_ROLE
  VIEW_MY_ROLE

  CREATE_ROLE

  UPDATE_ALL_ROLE
  UPDATE_MY_ROLE

  DELETE_ALL_ROLE
  DELETE_MY_ROLE

  // LAYOUT
  VIEW_LAYOUT
  UPDATE_LAYOUT

  // SETTINGS
  VIEW_SETTING
  UPDATE_GENERAL
  UPDATE_THEME
  UPDATE_SIDEBAR
  UPDATE_SMTP

  // REVALIDATE
  REVALIDATE
}

// FORMS

model Form {
  id String @id @default(cuid())

  name           String  @unique
  redirectMail   Boolean @default(false)
  mailToRedirect String?
  successMessage String?
  errorMessage   String?
  extraData      Json

  messages Message[]
  fields   FormField[]

  discontinued Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  usedInSection LinkedToSection[]
}

enum FormFieldType {
  TEXT
  NUMBER
  EMAIL
  PASSWORD
  PARAGRAPH
  OPTION
  CHECKBOX
  MULTICHECKBOX
  RADIO
  BUTTON
  TITLE
  CONTENT
}

enum FormButtonType {
  SUBMIT
  RESET
  LINK
}

model FormField {
  id String @id @default(cuid())

  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  type        FormFieldType
  label       String
  placeholder String?

  containerId String?
  container   Container? @relation(fields: [containerId], references: [id], onDelete: Cascade)

  position Int
  line     Int

  messageFields MessageField[]

  options    Json?
  buttonType FormButtonType?

  min Float?
  max Float?

  defaultText     String?
  defaultNumber   Float?
  defaultMultiple Json?

  required Boolean? @default(false)

  updatedAt DateTime @updatedAt
}

model Message {
  id String @id @default(cuid())

  marked   Boolean        @default(false)
  read     Boolean        @default(false)
  readById String?
  readBy   User?          @relation(fields: [readById], references: [id])
  fields   MessageField[]

  formId String
  form   Form   @relation(fields: [formId], references: [id])

  createdAt DateTime @default(now())
}

model MessageField {
  id String @id @default(cuid())

  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  formFieldId String
  formField   FormField @relation(fields: [formFieldId], references: [id])

  valueText     String?
  valueNumber   Int?
  valueBoolean  Boolean?
  valueMultiple Json?
}

// SETTINGS

enum SettingType {
  APP_NAME
  BACKGROUND_COLOR
  PRIMARY_COLOR
  SECONDARY_COLOR
  PRIMARY_TEXT_COLOR
  SECONDARY_TEXT_COLOR
  DARK_COLOR
  LIGHT_COLOR
  EXTRA_COLOR
  MAIL_HOST
  MAIL_PORT
  MAIL_USER
  MAIL_PASS
  SIDEBAR_IS_ACTIVE
  SIDEBAR_WIDTH
  SIDEBAR_UNIT
  SIDEBAR_POSITION
  SIDEBAR_COLOR
  SIDEBAR_BREAKPOINT_SIZE
  MAINTENANCE_MODE
  SITE_URL
  INDEXED
  LANGUAGE_LOCALES
  LANGUAGE_PREFERRED
}

model Setting {
  id String @id @default(cuid())

  type    SettingType @unique
  value   String
  visible Boolean     @default(true)

  updatedAt DateTime @updatedAt
}

// SLUGS

model Slug {
  id String @id @default(cuid())

  full  String @unique
  basic String

  parentId String?
  parent   Slug?   @relation(fields: [parentId], references: [id], name: "childs")
  childs   Slug[]  @relation(name: "childs")

  pageId      String?    @unique
  page        Page?      @relation(fields: [pageId], references: [id], onDelete: Cascade)
  containerId String?    @unique
  container   Container? @relation(fields: [containerId], references: [id], onDelete: Cascade)
  contentId   String?    @unique
  content     Content?   @relation(fields: [contentId], references: [id])

  revalidatedAt DateTime @default(now())
  updatedAt     DateTime @updatedAt

  useAsLink Link[]
}

// METADATAS

model Metadata {
  id String @id @default(cuid())

  types  String[]
  values MetadataValue[]

  pageId String?
  page   Page?   @relation(fields: [pageId], references: [id], onDelete: Cascade)

  containerId String?
  container   Container? @relation(fields: [containerId], references: [id], onDelete: Cascade, name: "containerMetadatas")

  contentId String?
  content   Content? @relation(fields: [contentId], references: [id], onDelete: Cascade)

  containerTemplateId String?
  containerTemplate   Container? @relation(fields: [containerTemplateId], references: [id], onDelete: Cascade, name: "contentsMetadatas")
}

model MetadataValue {
  id String @id @default(cuid())

  metadataId String
  metadata   Metadata @relation(fields: [metadataId], references: [id], onDelete: Cascade)

  number  Float?
  string  String?
  boolean Boolean?
  mediaId String?
  media   Media?   @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  linkId  String?
  link    Link?    @relation(fields: [linkId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

// SECTIONS

enum SectionType {
  PAGE
  PAGE_SIDEBAR

  CONTAINER
  CONTAINER_SIDEBAR

  TEMPLATE_TOP
  TEMPLATE_BOTTOM
  TEMPLATE_SIDEBAR_TOP
  TEMPLATE_SIDEBAR_BOTTOM

  CONTENT
  CONTENT_SIDEBAR

  LAYOUT_HEADER
  LAYOUT_FOOTER

  LAYOUT_CONTENT_TOP
  LAYOUT_CONTENT_BOTTOM

  LAYOUT_SIDEBAR_TOP
  LAYOUT_SIDEBAR_BOTTOM
}

enum CodeLanguage {
  AF
  SQ
  AR
  EU
  BE
  BG
  CA
  ZH
  HR
  CS
  DA
  NL
  EN
  ET
  FO
  FA
  FI
  FR
  GD
  DE
  EL
  HE
  HI
  HU
  IS
  ID
  GA
  IT
  JA
  KO
  KU
  LV
  LT
  MK
  ML
  MS
  MT
  NO
  NB
  NN
  PL
  PT
  PA
  RM
  RO
  RU
  SR
  SK
  SL
  SB
  ES
  SV
  TH
  TS
  TN
  TR
  UA
  UR
  VE
  VI
  CY
  XH
  JI
  ZU
}

model Section {
  id String @id @default(cuid())

  type     SectionType
  block    String
  position Int
  language CodeLanguage @default(EN)

  value Json

  // Element releated
  pageId String?
  page   Page?   @relation(fields: [pageId], references: [id], onDelete: Cascade)

  containerId String?
  container   Container? @relation(fields: [containerId], references: [id], onDelete: Cascade)

  contentId String?
  content   Content? @relation(fields: [contentId], references: [id], onDelete: Cascade)

  // Linked data
  linkedData LinkedToSection[]
}

model LinkedToSection {
  id String @id @default(cuid())

  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  mediaId String?
  media   Media?  @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  formId String?
  form   Form?   @relation(fields: [formId], references: [id], onDelete: Cascade)

  linkId String?
  link   Link?   @relation(fields: [linkId], references: [id], onDelete: Cascade)

  menuId String?
  menu   Menu?   @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@unique([sectionId, mediaId, formId, linkId, menuId])
}

// PAGES

enum PageType {
  PAGE
  HOMEPAGE
  SIGNIN
  NOTFOUND
  ERROR
  MAINTENANCE
}

model Page {
  id String @id @default(cuid())

  name String
  type PageType @default(PAGE)

  slug Slug?

  metadatas Metadata[]
  sections  Section[]

  published Boolean @default(true)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdByUserId String?
  createdBy       User?    @relation(fields: [createdByUserId], references: [id])
}

// CONTAINERS

model Container {
  id String @id @default(cuid())

  name              String
  slug              Slug?
  fields            ContainerField[]
  metadatas         Metadata[]       @relation(name: "containerMetadatas")
  contentsMetadatas Metadata[]       @relation(name: "contentsMetadatas")

  contents  Content[]
  formField FormField[]

  sections Section[]

  published Boolean @default(true)

  menuChild MenuChild[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdByUserId String?
  createdBy       User?    @relation(fields: [createdByUserId], references: [id])
}

enum ContainerFieldType {
  STRING
  NUMBER
  DATE
  LINK
  PARAGRAPH
  IMAGE
  FILE
  VIDEO
  CONTENT
  OPTION
  RICHTEXT
  COLOR
  LOCATION
}

model ContainerField {
  id String @id @default(cuid())

  name      String
  required  Boolean
  type      ContainerFieldType
  multiple  Boolean
  position  Int
  metadatas String[]

  min Int?
  max Int?

  startDate DateTime?
  endDate   DateTime?
  valueMin  Float?
  valueMax  Float?

  defaultTextValue           String?
  defaultMultipleTextValue   String[]
  defaultNumberValue         Float?
  defaultMultipleNumberValue Float[]
  defaultDateValue           DateTime?
  defaultMultipleDateValue   DateTime[]
  defaultJsonValue           Json?
  defaultMultipleJsonValue   Json[]

  releatedFields ContentField[]
  // orderByInMenu  MenuChild[]

  containerId String
  container   Container @relation(fields: [containerId], references: [id], onDelete: Cascade)
}

// CONTENTS

model Content {
  id String @id @default(cuid())

  name String
  slug Slug?

  containerId String
  container   Container @relation(fields: [containerId], references: [id], onDelete: Cascade)

  fields    ContentField[]
  metadatas Metadata[]

  sections Section[]

  published Boolean @default(true)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdByUserId String?
  createdBy       User?    @relation(fields: [createdByUserId], references: [id])
}

model ContentField {
  id String @id @default(cuid())

  contentId String
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  // Copy from parent field
  type     ContainerFieldType
  multiple Boolean

  releatedFieldId String
  releatedField   ContainerField @relation(fields: [releatedFieldId], references: [id], onDelete: Cascade)

  textValue           String?
  multipleTextValue   String[]
  numberValue         Float?
  multipleNumberValue Float[]
  dateValue           DateTime?
  multipleDateValue   DateTime[]
  jsonValue           Json?
  multipleJsonValue   Json[]

  @@unique([contentId, releatedFieldId])
}

// MEDIAS

enum MediaType {
  IMAGE
  VIDEO
  FILE
}

model Media {
  id String @id @default(cuid())

  type MediaType

  uri      String  @unique
  mimeType String
  name     String
  size     Int
  alt      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  usedInSections  LinkedToSection[]
  usedInMetadatas MetadataValue[]
}

// MENU

enum MenuChildType {
  TITLE
  LINK
  CONTENT
}

model Menu {
  id String @id @default(cuid())

  name String

  usedInSections LinkedToSection[]

  childs MenuChild[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderBy {
  ASC
  DESC
}

model MenuChild {
  id String @id @default(cuid())

  menuId String
  menu   Menu   @relation(fields: [menuId], references: [id], onDelete: Cascade)

  type     MenuChildType
  parentId String?
  parent   MenuChild?    @relation(fields: [parentId], references: [id], name: "childs", onDelete: Cascade)
  childs   MenuChild[]   @relation(name: "childs")

  position Int

  containerId    String?
  container      Container? @relation(fields: [containerId], references: [id], onDelete: Cascade)
  filters        Json?
  orderByFieldId String?
  // orderByField   ContainerField? @relation(fields: [orderByFieldId], references: [id], onDelete: Cascade)
  orderBy        OrderBy?

  linkId String?
  Link   Link?   @relation(fields: [linkId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// LINK

enum LinkType {
  IN
  OUT
}

enum LinkProtocol {
  HTTP
  HTTPS
}

model Link {
  id String @id @default(cuid())

  type LinkType

  slugId String? @unique
  slug   Slug?   @relation(fields: [slugId], references: [id], onDelete: Cascade)

  link     String?
  prototol LinkProtocol?

  usedInSections LinkedToSection[]
  usedInMetadata MetadataValue[]
  usedInMenu     MenuChild[]
}
