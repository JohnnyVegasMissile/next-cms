// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Page {
  // id          Int               @id @default(autoincrement())
  id                String          @id @default(cuid())
  title             String
  metadatas         Metadata[]
  type              String          @default("page")
  slug              String?         @unique
  headerId          String?
  header            Element?        @relation(fields: [headerId], references: [id], name: "pageHeader")
  sections          Section[]
  articles          Article[]
  footerId          String?
  footer            Element?        @relation(fields: [footerId], references: [id], name: "pageFooter")
  published         Boolean         @default(true)
  updatedAt         DateTime        @updatedAt
}

model Metadata {
  // id              Int           @id @default(autoincrement())
  id                String          @id @default(cuid())
  name              String
  content           String
  // pageId          Int?
  pageId            String?
  page              Page?           @relation(fields: [pageId], references: [id])
}

model Section {
  // id              Int           @id @default(autoincrement())
  id                String          @id @default(cuid())
  type              String?
  // pageId          Int?
  pageId            String
  page              Page            @relation(fields: [pageId], references: [id])
  elementId         String?
  element           Element?        @relation(fields: [elementId], references: [id])
  position          Int
  content           String?  
}

model Element {
  // id              Int           @id @default(autoincrement())
  id                String          @id @default(cuid())
  title             String          @unique
  type              String
  section           Section[]
  pageHeaders       Page[]          @relation(name: "pageHeader")  
  pageFooters       Page[]          @relation(name: "pageFooter")
  content           String?
  updatedAt         DateTime        @updatedAt
}

model Media {
  // id              Int           @id @default(autoincrement())
  id                String          @id @default(cuid())
  uri               String          @unique
  mimeType          String
  name              String
  size              Int
  alt               String?
  article           Article[]
  uploadTime        DateTime        @default(now())
}

model User {
  // id              Int           @id @default(autoincrement())
  id                String          @id @default(cuid())
  name              String?
  login             Login?
  updatedAt         DateTime        @updatedAt
}

model Login {
  // id              Int           @id @default(autoincrement())
  id                String          @id @default(cuid())
  userId            String          @unique
  user              User            @relation(fields: [userId], references: [id])
  sessions          Session[]
  type              String          @default("user") // user admin super-admin
  email             String          @unique
  password          String
  updatedAt         DateTime        @updatedAt
}

model Session {
  // id              Int           @id @default(autoincrement())
  id                String          @id @default(cuid())
  token             String          @unique
  loginId           String
  login             Login           @relation(fields: [loginId], references: [id])
  expiresAt         DateTime
  updatedAt         DateTime        @updatedAt
}

model Article {
  // id            Int              @id @default(autoincrement())
  id                String          @id @default(cuid())
  title             String
  coverId           String?
  cover             Media?          @relation(fields: [coverId], references: [id])
  description       String?
  author            String?
  slug              String          @unique
  pageId            String?
  page              Page?           @relation(fields: [pageId], references: [id])
  published         Boolean         @default(true)
  updatedAt         DateTime        @updatedAt
}

model Setting {
  // id            Int              @id @default(autoincrement())
  id                String          @id @default(cuid())
  name              String          @unique
  value             String
  updatedAt         DateTime        @updatedAt
}